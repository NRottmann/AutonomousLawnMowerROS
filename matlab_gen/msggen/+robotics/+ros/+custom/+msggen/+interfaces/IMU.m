classdef IMU < robotics.ros.Message
    %IMU MATLAB implementation of interfaces/IMU
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'interfaces/IMU' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'f8edf282ffdeb93ec0ca6299e570b773' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsQuaternionClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Quaternion') % Dispatch to MATLAB class for message type geometry_msgs/Quaternion
        GeometryMsgsVector3Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Orientation
        AngularVelocity
        LinearAcceleration
        RawMagnetometer
        Sys
        Gyro
        Accel
        Mag
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Orientation', [], 'AngularVelocity', [], 'LinearAcceleration', [], 'RawMagnetometer', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Accel', 'AngularVelocity', 'Gyro', 'Header', 'LinearAcceleration', 'Mag', 'Orientation', 'RawMagnetometer', 'Sys'} % List of non-constant message properties
        ROSPropertyList = {'accel', 'angular_velocity', 'gyro', 'header', 'linear_acceleration', 'mag', 'orientation', 'raw_magnetometer', 'sys'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = IMU(msg)
            %IMU Construct the message object IMU
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'IMU', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function orientation = get.Orientation(obj)
            %get.Orientation Get the value for property Orientation
            if isempty(obj.Cache.Orientation)
                obj.Cache.Orientation = feval(obj.GeometryMsgsQuaternionClass, obj.JavaMessage.getOrientation);
            end
            orientation = obj.Cache.Orientation;
        end
        
        function set.Orientation(obj, orientation)
            %set.Orientation Set the value for property Orientation
            validateattributes(orientation, {obj.GeometryMsgsQuaternionClass}, {'nonempty', 'scalar'}, 'IMU', 'Orientation');
            
            obj.JavaMessage.setOrientation(orientation.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Orientation)
                obj.Cache.Orientation.setJavaObject(orientation.getJavaObject);
            end
        end
        
        function angularvelocity = get.AngularVelocity(obj)
            %get.AngularVelocity Get the value for property AngularVelocity
            if isempty(obj.Cache.AngularVelocity)
                obj.Cache.AngularVelocity = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getAngularVelocity);
            end
            angularvelocity = obj.Cache.AngularVelocity;
        end
        
        function set.AngularVelocity(obj, angularvelocity)
            %set.AngularVelocity Set the value for property AngularVelocity
            validateattributes(angularvelocity, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'IMU', 'AngularVelocity');
            
            obj.JavaMessage.setAngularVelocity(angularvelocity.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.AngularVelocity)
                obj.Cache.AngularVelocity.setJavaObject(angularvelocity.getJavaObject);
            end
        end
        
        function linearacceleration = get.LinearAcceleration(obj)
            %get.LinearAcceleration Get the value for property LinearAcceleration
            if isempty(obj.Cache.LinearAcceleration)
                obj.Cache.LinearAcceleration = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getLinearAcceleration);
            end
            linearacceleration = obj.Cache.LinearAcceleration;
        end
        
        function set.LinearAcceleration(obj, linearacceleration)
            %set.LinearAcceleration Set the value for property LinearAcceleration
            validateattributes(linearacceleration, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'IMU', 'LinearAcceleration');
            
            obj.JavaMessage.setLinearAcceleration(linearacceleration.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.LinearAcceleration)
                obj.Cache.LinearAcceleration.setJavaObject(linearacceleration.getJavaObject);
            end
        end
        
        function rawmagnetometer = get.RawMagnetometer(obj)
            %get.RawMagnetometer Get the value for property RawMagnetometer
            if isempty(obj.Cache.RawMagnetometer)
                obj.Cache.RawMagnetometer = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getRawMagnetometer);
            end
            rawmagnetometer = obj.Cache.RawMagnetometer;
        end
        
        function set.RawMagnetometer(obj, rawmagnetometer)
            %set.RawMagnetometer Set the value for property RawMagnetometer
            validateattributes(rawmagnetometer, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'IMU', 'RawMagnetometer');
            
            obj.JavaMessage.setRawMagnetometer(rawmagnetometer.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.RawMagnetometer)
                obj.Cache.RawMagnetometer.setJavaObject(rawmagnetometer.getJavaObject);
            end
        end
        
        function sys = get.Sys(obj)
            %get.Sys Get the value for property Sys
            sys = typecast(int8(obj.JavaMessage.getSys), 'uint8');
        end
        
        function set.Sys(obj, sys)
            %set.Sys Set the value for property Sys
            validateattributes(sys, {'numeric'}, {'nonempty', 'scalar'}, 'IMU', 'Sys');
            
            obj.JavaMessage.setSys(sys);
        end
        
        function gyro = get.Gyro(obj)
            %get.Gyro Get the value for property Gyro
            gyro = typecast(int8(obj.JavaMessage.getGyro), 'uint8');
        end
        
        function set.Gyro(obj, gyro)
            %set.Gyro Set the value for property Gyro
            validateattributes(gyro, {'numeric'}, {'nonempty', 'scalar'}, 'IMU', 'Gyro');
            
            obj.JavaMessage.setGyro(gyro);
        end
        
        function accel = get.Accel(obj)
            %get.Accel Get the value for property Accel
            accel = typecast(int8(obj.JavaMessage.getAccel), 'uint8');
        end
        
        function set.Accel(obj, accel)
            %set.Accel Set the value for property Accel
            validateattributes(accel, {'numeric'}, {'nonempty', 'scalar'}, 'IMU', 'Accel');
            
            obj.JavaMessage.setAccel(accel);
        end
        
        function mag = get.Mag(obj)
            %get.Mag Get the value for property Mag
            mag = typecast(int8(obj.JavaMessage.getMag), 'uint8');
        end
        
        function set.Mag(obj, mag)
            %set.Mag Set the value for property Mag
            validateattributes(mag, {'numeric'}, {'nonempty', 'scalar'}, 'IMU', 'Mag');
            
            obj.JavaMessage.setMag(mag);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Orientation = [];
            obj.Cache.AngularVelocity = [];
            obj.Cache.LinearAcceleration = [];
            obj.Cache.RawMagnetometer = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Sys = obj.Sys;
            cpObj.Gyro = obj.Gyro;
            cpObj.Accel = obj.Accel;
            cpObj.Mag = obj.Mag;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Orientation = copy(obj.Orientation);
            cpObj.AngularVelocity = copy(obj.AngularVelocity);
            cpObj.LinearAcceleration = copy(obj.LinearAcceleration);
            cpObj.RawMagnetometer = copy(obj.RawMagnetometer);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Sys = strObj.Sys;
            obj.Gyro = strObj.Gyro;
            obj.Accel = strObj.Accel;
            obj.Mag = strObj.Mag;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Orientation = feval([obj.GeometryMsgsQuaternionClass '.loadobj'], strObj.Orientation);
            obj.AngularVelocity = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.AngularVelocity);
            obj.LinearAcceleration = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.LinearAcceleration);
            obj.RawMagnetometer = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.RawMagnetometer);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Sys = obj.Sys;
            strObj.Gyro = obj.Gyro;
            strObj.Accel = obj.Accel;
            strObj.Mag = obj.Mag;
            strObj.Header = saveobj(obj.Header);
            strObj.Orientation = saveobj(obj.Orientation);
            strObj.AngularVelocity = saveobj(obj.AngularVelocity);
            strObj.LinearAcceleration = saveobj(obj.LinearAcceleration);
            strObj.RawMagnetometer = saveobj(obj.RawMagnetometer);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.interfaces.IMU.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.interfaces.IMU;
            obj.reload(strObj);
        end
    end
end
