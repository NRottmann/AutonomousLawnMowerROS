classdef Odometry < robotics.ros.Message
    %Odometry MATLAB implementation of interfaces/Odometry
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'interfaces/Odometry' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '48d9b38444f2b9083146cd30312892ee' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        LR
        LL
        IR
        IL
        VR
        VL
        RawR
        RawL
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Header', 'IL', 'IR', 'LL', 'LR', 'RawL', 'RawR', 'VL', 'VR'} % List of non-constant message properties
        ROSPropertyList = {'header', 'i_L', 'i_R', 'l_L', 'l_R', 'rawL', 'rawR', 'v_L', 'v_R'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Odometry(msg)
            %Odometry Construct the message object Odometry
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Odometry', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function lr = get.LR(obj)
            %get.LR Get the value for property LR
            lr = single(obj.JavaMessage.getLR);
        end
        
        function set.LR(obj, lr)
            %set.LR Set the value for property LR
            validateattributes(lr, {'numeric'}, {'nonempty', 'scalar'}, 'Odometry', 'LR');
            
            obj.JavaMessage.setLR(lr);
        end
        
        function ll = get.LL(obj)
            %get.LL Get the value for property LL
            ll = single(obj.JavaMessage.getLL);
        end
        
        function set.LL(obj, ll)
            %set.LL Set the value for property LL
            validateattributes(ll, {'numeric'}, {'nonempty', 'scalar'}, 'Odometry', 'LL');
            
            obj.JavaMessage.setLL(ll);
        end
        
        function ir = get.IR(obj)
            %get.IR Get the value for property IR
            ir = typecast(int16(obj.JavaMessage.getIR), 'uint16');
        end
        
        function set.IR(obj, ir)
            %set.IR Set the value for property IR
            validateattributes(ir, {'numeric'}, {'nonempty', 'scalar'}, 'Odometry', 'IR');
            
            obj.JavaMessage.setIR(ir);
        end
        
        function il = get.IL(obj)
            %get.IL Get the value for property IL
            il = typecast(int16(obj.JavaMessage.getIL), 'uint16');
        end
        
        function set.IL(obj, il)
            %set.IL Set the value for property IL
            validateattributes(il, {'numeric'}, {'nonempty', 'scalar'}, 'Odometry', 'IL');
            
            obj.JavaMessage.setIL(il);
        end
        
        function vr = get.VR(obj)
            %get.VR Get the value for property VR
            vr = int16(obj.JavaMessage.getVR);
        end
        
        function set.VR(obj, vr)
            %set.VR Set the value for property VR
            validateattributes(vr, {'numeric'}, {'nonempty', 'scalar'}, 'Odometry', 'VR');
            
            obj.JavaMessage.setVR(vr);
        end
        
        function vl = get.VL(obj)
            %get.VL Get the value for property VL
            vl = int16(obj.JavaMessage.getVL);
        end
        
        function set.VL(obj, vl)
            %set.VL Set the value for property VL
            validateattributes(vl, {'numeric'}, {'nonempty', 'scalar'}, 'Odometry', 'VL');
            
            obj.JavaMessage.setVL(vl);
        end
        
        function rawr = get.RawR(obj)
            %get.RawR Get the value for property RawR
            rawr = typecast(int16(obj.JavaMessage.getRawR), 'uint16');
        end
        
        function set.RawR(obj, rawr)
            %set.RawR Set the value for property RawR
            validateattributes(rawr, {'numeric'}, {'nonempty', 'scalar'}, 'Odometry', 'RawR');
            
            obj.JavaMessage.setRawR(rawr);
        end
        
        function rawl = get.RawL(obj)
            %get.RawL Get the value for property RawL
            rawl = typecast(int16(obj.JavaMessage.getRawL), 'uint16');
        end
        
        function set.RawL(obj, rawl)
            %set.RawL Set the value for property RawL
            validateattributes(rawl, {'numeric'}, {'nonempty', 'scalar'}, 'Odometry', 'RawL');
            
            obj.JavaMessage.setRawL(rawl);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.LR = obj.LR;
            cpObj.LL = obj.LL;
            cpObj.IR = obj.IR;
            cpObj.IL = obj.IL;
            cpObj.VR = obj.VR;
            cpObj.VL = obj.VL;
            cpObj.RawR = obj.RawR;
            cpObj.RawL = obj.RawL;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.LR = strObj.LR;
            obj.LL = strObj.LL;
            obj.IR = strObj.IR;
            obj.IL = strObj.IL;
            obj.VR = strObj.VR;
            obj.VL = strObj.VL;
            obj.RawR = strObj.RawR;
            obj.RawL = strObj.RawL;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.LR = obj.LR;
            strObj.LL = obj.LL;
            strObj.IR = obj.IR;
            strObj.IL = obj.IL;
            strObj.VR = obj.VR;
            strObj.VL = obj.VL;
            strObj.RawR = obj.RawR;
            strObj.RawL = obj.RawL;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.interfaces.Odometry.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.interfaces.Odometry;
            obj.reload(strObj);
        end
    end
end
