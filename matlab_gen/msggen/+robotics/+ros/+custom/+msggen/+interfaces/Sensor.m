classdef Sensor < robotics.ros.Message
    %Sensor MATLAB implementation of interfaces/Sensor
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'interfaces/Sensor' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '27612c0e25b88f3e0e1c6e0a4a2c533c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        L1
        L2
        R1
        R2
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Header', 'L1', 'L2', 'R1', 'R2'} % List of non-constant message properties
        ROSPropertyList = {'header', 'l1', 'l2', 'r1', 'r2'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Sensor(msg)
            %Sensor Construct the message object Sensor
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Sensor', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function l1 = get.L1(obj)
            %get.L1 Get the value for property L1
            l1 = typecast(int8(obj.JavaMessage.getL1), 'uint8');
        end
        
        function set.L1(obj, l1)
            %set.L1 Set the value for property L1
            validateattributes(l1, {'numeric'}, {'nonempty', 'scalar'}, 'Sensor', 'L1');
            
            obj.JavaMessage.setL1(l1);
        end
        
        function l2 = get.L2(obj)
            %get.L2 Get the value for property L2
            l2 = typecast(int8(obj.JavaMessage.getL2), 'uint8');
        end
        
        function set.L2(obj, l2)
            %set.L2 Set the value for property L2
            validateattributes(l2, {'numeric'}, {'nonempty', 'scalar'}, 'Sensor', 'L2');
            
            obj.JavaMessage.setL2(l2);
        end
        
        function r1 = get.R1(obj)
            %get.R1 Get the value for property R1
            r1 = typecast(int8(obj.JavaMessage.getR1), 'uint8');
        end
        
        function set.R1(obj, r1)
            %set.R1 Set the value for property R1
            validateattributes(r1, {'numeric'}, {'nonempty', 'scalar'}, 'Sensor', 'R1');
            
            obj.JavaMessage.setR1(r1);
        end
        
        function r2 = get.R2(obj)
            %get.R2 Get the value for property R2
            r2 = typecast(int8(obj.JavaMessage.getR2), 'uint8');
        end
        
        function set.R2(obj, r2)
            %set.R2 Set the value for property R2
            validateattributes(r2, {'numeric'}, {'nonempty', 'scalar'}, 'Sensor', 'R2');
            
            obj.JavaMessage.setR2(r2);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.L1 = obj.L1;
            cpObj.L2 = obj.L2;
            cpObj.R1 = obj.R1;
            cpObj.R2 = obj.R2;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.L1 = strObj.L1;
            obj.L2 = strObj.L2;
            obj.R1 = strObj.R1;
            obj.R2 = strObj.R2;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.L1 = obj.L1;
            strObj.L2 = obj.L2;
            strObj.R1 = obj.R1;
            strObj.R2 = obj.R2;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.interfaces.Sensor.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.interfaces.Sensor;
            obj.reload(strObj);
        end
    end
end
